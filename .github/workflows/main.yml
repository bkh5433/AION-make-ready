name: Deploy Backend and Frontend

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Deploy backend to EC2
      - name: Deploy Backend to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key $EC2_USERNAME@$EC2_HOST << EOF
            # Stop existing container
            docker stop aion-api || true
            docker rm aion-api || true

            # Clone/pull latest code
            if [ ! -d "aion-api" ]; then
              git clone https://github.com/${{ github.repository }}.git aion-api
            else
              cd aion-api
              git fetch
              git reset --hard origin/${GITHUB_REF##*/}
            fi

            cd aion-api
          
            # Build new Docker image
            docker build -t aion-api:$GITHUB_SHA -f backend/Dockerfile backend/
          
            # Run new container with environment based on branch
            if [ "${GITHUB_REF##*/}" = "dev" ]; then
              # Development environment variables
              docker run -d \
                --name aion-api \
                --restart always \
                -p 5000:5000 \
                -e DB_SERVER='${{ secrets.DEV_DB_SERVER }}' \
                -e DB_NAME='${{ secrets.DEV_DB_NAME }}' \
                -e DB_USER='${{ secrets.DEV_DB_USER }}' \
                -e DB_PASSWORD='${{ secrets.DEV_DB_PASSWORD }}' \
                -e AWS_S3_BUCKET='${{ secrets.DEV_AWS_BUCKET_NAME }}' \
                -e AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY_ID }}' \
                -e AWS_SECRET_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
                -e CORS_ORIGINS='${{ secrets.DEV_CORS_ORIGINS }}' \
                aion-api:$GITHUB_SHA
            else
              # Production environment variables
              docker run -d \
                --name aion-api \
                --restart always \
                -p 5000:5000 \
                -e DB_SERVER='${{ secrets.PROD_DB_SERVER }}' \
                -e DB_NAME='${{ secrets.PROD_DB_NAME }}' \
                -e DB_USER='${{ secrets.PROD_DB_USER }}' \
                -e DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}' \
                -e AWS_S3_BUCKET='${{ secrets.PROD_AWS_BUCKET_NAME }}' \
                -e AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY_ID }}' \
                -e AWS_SECRET_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
                -e CORS_ORIGINS='${{ secrets.PROD_CORS_ORIGINS }}' \
                aion-api:$GITHUB_SHA
            fi

            # Cleanup old images
            docker image prune -f
          EOF

      # Deploy frontend to Amplify
      - name: Deploy Frontend to Dev
        if: github.ref == 'refs/heads/dev'
        run: |
          aws amplify start-job --app-id ${{ secrets.AMPLIFY_APP_ID }} --branch-name dev --job-type RELEASE

      - name: Deploy Frontend to Production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          aws amplify start-job --app-id ${{ secrets.AMPLIFY_APP_ID }} --branch-name prod --job-type RELEASE