name: Deploy Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Deploy backend to EC2
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key $EC2_USERNAME@$EC2_HOST << EOF
            # Stop existing container
            docker stop aion-api || true
            docker rm aion-api || true

            # Clone/pull latest code
            if [ ! -d "aion-api" ]; then
              git clone https://github.com/${{ github.repository }}.git aion-api
            else
              cd aion-api
              git fetch
              git reset --hard origin/main
            fi

            cd aion-api
          
            # Build new Docker image
            docker build -t aion-api:$GITHUB_SHA -f backend/Dockerfile backend/
          
            # Run new container
            docker run -d \
              --name aion-api \
              --restart always \
              -p 5000:5000 \
              -e DB_SERVER='${{ secrets.DB_SERVER }}' \
              -e DB_NAME='${{ secrets.DB_NAME }}' \
              -e DB_USER='${{ secrets.DB_USER }}' \
              -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -e AWS_S3_BUCKET='${{ secrets.AWS_BUCKET_NAME }}' \
              -e AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -e AWS_SECRET_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              -e CORS_ORIGINS='${{ secrets.CORS_ORIGINS }}' \
              aion-api:$GITHUB_SHA

            # Cleanup old images
            docker image prune -f
          EOF