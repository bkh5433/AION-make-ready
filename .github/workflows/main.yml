name: Deploy Backend

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check Required Secrets
        run: |
          missing_secrets=()

          # Check SSH credentials (required for deployment)
          if [[ -z "${{ secrets.EC2_HOST }}" ]]; then
            missing_secrets+=("EC2_HOST")
          fi
          if [[ -z "${{ secrets.EC2_USERNAME }}" ]]; then
            missing_secrets+=("EC2_USERNAME")
          fi
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            missing_secrets+=("SSH_PRIVATE_KEY")
          fi

          # Check production server credentials (only required on main)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ -z "${{ secrets.PROD_SERVER_HOST }}" ]]; then
              missing_secrets+=("PROD_SERVER_HOST")
            fi
            if [[ -z "${{ secrets.PROD_SERVER_USERNAME }}" ]]; then
              missing_secrets+=("PROD_SERVER_USERNAME")
            fi
            if [[ -z "${{ secrets.PROD_SERVER_PASSWORD }}" ]]; then
              missing_secrets+=("PROD_SERVER_PASSWORD")
            fi
          fi

          # Check environment-specific secrets based on branch
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            # Development environment secrets
            if [[ -z "${{ secrets.DEV_DB_SERVER }}" ]]; then
              missing_secrets+=("DEV_DB_SERVER")
            fi
            if [[ -z "${{ secrets.DEV_DB_NAME }}" ]]; then
              missing_secrets+=("DEV_DB_NAME")
            fi
            if [[ -z "${{ secrets.DEV_DB_USER }}" ]]; then
              missing_secrets+=("DEV_DB_USER")
            fi
            if [[ -z "${{ secrets.DEV_DB_PASSWORD }}" ]]; then
              missing_secrets+=("DEV_DB_PASSWORD")
            fi
            if [[ -z "${{ secrets.DEV_CORS_ORIGINS }}" ]]; then
              missing_secrets+=("DEV_CORS_ORIGINS")
            fi
          else
            # Production environment secrets (optional)
            if [[ -z "${{ secrets.PROD_DB_SERVER }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_SERVER"
            fi
            if [[ -z "${{ secrets.PROD_DB_NAME }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_NAME"
            fi
            if [[ -z "${{ secrets.PROD_DB_USER }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_USER"
            fi
            if [[ -z "${{ secrets.PROD_DB_PASSWORD }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_PASSWORD"
            fi
            if [[ -z "${{ secrets.PROD_CORS_ORIGINS }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_CORS_ORIGINS"
            fi
            if [[ -z "${{ secrets.PROD_FRONTEND_URL }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_FRONTEND_URL"
            fi
          fi

          # Check optional Firebase secrets
          if [[ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_PROJECT_ID"
          fi
          if [[ -z "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_PRIVATE_KEY_ID"
          fi
          if [[ -z "${{ secrets.FIREBASE_PRIVATE_KEY }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_PRIVATE_KEY"
          fi
          if [[ -z "${{ secrets.FIREBASE_CLIENT_EMAIL }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_CLIENT_EMAIL"
          fi
          if [[ -z "${{ secrets.FIREBASE_CLIENT_ID }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_CLIENT_ID"
          fi
          if [[ -z "${{ secrets.FIREBASE_AUTH_URI }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_AUTH_URI"
          fi
          if [[ -z "${{ secrets.FIREBASE_TOKEN_URI }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_TOKEN_URI"
          fi

          # Check optional Microsoft SSO secrets
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            if [[ -z "${{ secrets.DEV_MICROSOFT_SSO_ENABLED }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_SSO_ENABLED"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_CLIENT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_CLIENT_ID"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_CLIENT_SECRET }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_CLIENT_SECRET"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_TENANT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_TENANT_ID"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_DOMAIN_HINT }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_DOMAIN_HINT"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_REDIRECT_URI }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_REDIRECT_URI"
            fi
          else
            if [[ -z "${{ secrets.PROD_MICROSOFT_SSO_ENABLED }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_SSO_ENABLED"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_CLIENT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_CLIENT_ID"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_CLIENT_SECRET"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_TENANT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_TENANT_ID"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_DOMAIN_HINT"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_REDIRECT_URI }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_REDIRECT_URI"
            fi
          fi

          # If any required secrets are missing, fail the job
          if (( ${#missing_secrets[@]} > 0 )); then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

          echo "‚úÖ All required secrets are present"

  test-ssh-connection:
    runs-on: ubuntu-latest
    needs: validate-secrets
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Test SSH Connection
        env:
          BRANCH_NAME: ${{ github.base_ref }}
        run: |
          if [[ "$BRANCH_NAME" == "main" ]]; then
            # Test production server connection
            if [[ -z "${{ secrets.PROD_SERVER_PASSWORD }}" ]]; then
              echo "::error::Production server password is required for main branch"
              exit 1
            fi
            echo "Testing connection to production server..."
            sshpass -p "${{ secrets.PROD_SERVER_PASSWORD }}" \
              ssh -o StrictHostKeyChecking=no \
                  "${{ secrets.PROD_SERVER_USERNAME }}@${{ secrets.PROD_SERVER_HOST }}" \
              "echo 'Successfully connected to production server'"
          else
            # Test dev server (EC2) connection
            echo "Testing connection to dev server..."
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
            chmod 600 private_key
            ssh -o StrictHostKeyChecking=no -i private_key \
                "${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}" \
            "echo 'Successfully connected to dev server'"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: validate-secrets
    steps:
      - name: Install sshpass
        if: ${{ github.ref == 'refs/heads/main' }}
        run: sudo apt-get install -y sshpass

      - name: Deploy to Server
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          PROD_SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          PROD_SERVER_USERNAME: ${{ secrets.PROD_SERVER_USERNAME }}
          PROD_SERVER_PASSWORD: ${{ secrets.PROD_SERVER_PASSWORD }}
          GITHUB_SHA: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "üöÄ Starting deployment process..."
          echo "Branch: $BRANCH_NAME"
          echo "Commit: $GITHUB_SHA"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "üìù Setting up production deployment..."
            cat > deploy_commands.sh << 'SCRIPT'
              export SUDO_ASKPASS=/tmp/sudo_pass.sh
              echo '#!/bin/bash' > /tmp/sudo_pass.sh
              echo "echo '$SUDO_PASS'" >> /tmp/sudo_pass.sh
              chmod +x /tmp/sudo_pass.sh

              set -e  # Exit on error

              echo "üîç Checking system status..."
              df -h
              sudo -A docker system df
              echo "Memory usage:"
              free -h

              echo "üì¶ Setting up deployment directory..."
              DEPLOY_DIR=~/aion-api
              DEPLOY_BRANCH="main"
              echo "Debug: Current branch is '$DEPLOY_BRANCH'"

              echo "Removing old deployment directory if it exists..."
              sudo -A rm -rf "$DEPLOY_DIR/logs/"*
              sudo -A rm -rf "$DEPLOY_DIR"
              sudo -A mkdir -p "$DEPLOY_DIR"
              sudo -A chown $USER:$USER "$DEPLOY_DIR"
              cd "$DEPLOY_DIR"

              echo "üê≥ Checking Docker status..."
              sudo -A docker ps

              echo "üõë Cleaning up old Docker resources..."
              sudo -A docker ps -a
              sudo -A docker images

              echo "Stopping/removing old containers..."
              sudo -A docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r sudo -A docker stop
              sudo -A docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r sudo -A docker rm

              echo "Removing old images..."
              sudo -A docker images "aion-*" --format "{{.ID}}" | xargs -r sudo -A docker rmi

              echo "Docker status after cleanup:"
              sudo -A docker ps -a
              sudo -A docker images

              echo "üì• Cloning repository..."
              git clone -b "$DEPLOY_BRANCH" https://github.com/${{ github.repository }}.git .

              echo "‚úÖ Verifying repository..."
              git status
              echo "Current commit: $(git rev-parse HEAD)"

              echo "üìÅ Creating logs directory..."
              sudo -A mkdir -p logs
              sudo -A chown -R root:root logs
              sudo -A chmod -R 755 logs
              sudo -A chmod g+s logs

              echo "üîß Setting up nginx..."
              sudo -A mkdir -p /var/www/html
              sudo -A chown -R www-data:www-data /var/www/html

              echo "üîÑ Updating nginx configuration..."
              sudo -A cp backend/nginx.conf /etc/nginx/sites-available/api

              echo "üîç Testing/reloading nginx..."
              sudo -A nginx -t && sudo -A systemctl reload nginx

              echo "üèóÔ∏è Building and starting services..."
              echo "ENVIRONMENT=production" > .env
              echo "DB_SERVER='${{ secrets.PROD_DB_SERVER }}'" >> .env
              echo "DB_NAME='${{ secrets.PROD_DB_NAME }}'" >> .env
              echo "DB_USER='${{ secrets.PROD_DB_USER }}'" >> .env
              echo "DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}'" >> .env
              echo "CORS_ORIGINS='${{ secrets.PROD_CORS_ORIGINS }}'" >> .env
              echo "FRONTEND_URL='${{ secrets.PROD_FRONTEND_URL }}'" >> .env
              echo "AWS_S3_BUCKET='${{ secrets.AWS_S3_BUCKET }}'" >> .env
              echo "AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY_ID }}'" >> .env
              echo "AWS_SECRET_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'" >> .env
              echo "FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}'" >> .env
              echo "FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}'" >> .env
              echo "FIREBASE_PRIVATE_KEY=\"${{ secrets.FIREBASE_PRIVATE_KEY }}\"" >> .env
              echo "FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}'" >> .env
              echo "FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}'" >> .env
              echo "FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}'" >> .env
              echo "FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}'" >> .env
              echo "MICROSOFT_SSO_ENABLED='${{ secrets.PROD_MICROSOFT_SSO_ENABLED }}'" >> .env
              echo "MICROSOFT_CLIENT_ID='${{ secrets.PROD_MICROSOFT_CLIENT_ID }}'" >> .env
              echo "MICROSOFT_CLIENT_SECRET='${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}'" >> .env
              echo "MICROSOFT_TENANT_ID='${{ secrets.PROD_MICROSOFT_TENANT_ID }}'" >> .env
              echo "MICROSOFT_DOMAIN_HINT='${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}'" >> .env
              echo "MICROSOFT_REDIRECT_URI='${{ secrets.PROD_MICROSOFT_REDIRECT_URI }}'" >> .env

              sudo -A docker compose up -d --build

              echo "‚è≥ Waiting for services to start..."
              sleep 10

              if ! sudo -A docker ps | grep -q "aion-api"; then
                echo "‚ùå API service failed to start"
                sudo -A docker compose logs api
                exit 1
              fi

              echo "üßπ Cleaning up old images..."
              sudo -A docker image prune -a --force --filter "until=72h"

              echo "‚úÖ Deployment completed successfully!"
              echo "Branch: $DEPLOY_BRANCH"
              echo "Commit: $GITHUB_SHA"
              echo "üåê Application is available at https://$(hostname -f)"
          SCRIPT

            # Execute the deployment script on production
            sshpass -p "$PROD_SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no \
              "$PROD_SERVER_USERNAME@$PROD_SERVER_HOST" \
              "SUDO_PASS='$PROD_SERVER_PASSWORD' bash -s" < deploy_commands.sh

            rm -f deploy_commands.sh
          else
            echo "üìù Setting up SSH key for dev deployment..."
            echo "$SSH_PRIVATE_KEY" > private_key
            chmod 600 private_key

            DEPLOY_BRANCH="$BRANCH_NAME"
            ssh -o StrictHostKeyChecking=no -i private_key "$EC2_USERNAME@$EC2_HOST" << EOF
              set -e
              DEPLOY_BRANCH="${DEPLOY_BRANCH}"

              echo "üîç Checking system status..."
              df -h
              docker system df
              echo "Memory usage:"
              free -h

              echo "üì¶ Setting up deployment directory..."
              DEPLOY_DIR="\${HOME}/aion-api"
              echo "Debug: Current branch is \${DEPLOY_BRANCH}"

              echo "Removing old deployment directory if it exists..."
              sudo rm -rf "\${DEPLOY_DIR}/logs/"*
              sudo rm -rf "\${DEPLOY_DIR}"
              sudo mkdir -p "\${DEPLOY_DIR}"
              sudo chown "\${USER}:\${USER}" "\${DEPLOY_DIR}"
              cd "\${DEPLOY_DIR}"

              echo "üê≥ Checking Docker status..."
              docker ps

              echo "üõë Cleaning up old Docker resources..."
              docker ps -a
              docker images

              echo "Stopping/removing old containers..."
              docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r docker stop
              docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r docker rm

              echo "Removing old images..."
              docker images "aion-*" --format "{{.ID}}" | xargs -r docker rmi

              echo "Docker status after cleanup:"
              docker ps -a
              docker images

              echo "üì• Cloning repository..."
              git clone -b "$DEPLOY_BRANCH" https://github.com/${{ github.repository }}.git .

              echo "‚úÖ Verifying repository..."
              git status
              echo "Current commit: $(git rev-parse HEAD)"

              echo "üìÅ Creating logs directory..."
              sudo mkdir -p logs
              sudo chown -R root:root logs
              sudo chmod -R 755 logs
              sudo chmod g+s logs

              echo "üîß Setting up nginx..."
              sudo mkdir -p /var/www/html
              sudo chown -R www-data:www-data /var/www/html

              echo "üìë Backing up existing nginx config (if present)..."
              sudo cp /etc/nginx/sites-available/api /etc/nginx/sites-available/api.backup || true

              echo "üîÑ Updating nginx configuration..."
              sudo cp backend/nginx.conf /etc/nginx/sites-available/api

              echo "üîç Testing/reloading nginx..."
              sudo nginx -t && sudo systemctl reload nginx

              echo "üèóÔ∏è Building and starting services..."
              if [ "$DEPLOY_BRANCH" = "dev" ]; then
                echo "üîß Using development environment variables..."
                echo "ENVIRONMENT=production" > .env
                echo "DB_SERVER=${{ secrets.DEV_DB_SERVER }}" >> .env
                echo "DB_NAME=${{ secrets.DEV_DB_NAME }}" >> .env
                echo "DB_USER=${{ secrets.DEV_DB_USER }}" >> .env
                echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env
                echo "CORS_ORIGINS=${{ secrets.DEV_CORS_ORIGINS }}" >> .env
                echo "FRONTEND_URL=${{ secrets.DEV_FRONTEND_URL }}" >> .env
                echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
                echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
                echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
                echo "FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" >> .env
                echo "FIREBASE_PRIVATE_KEY=\"${{ secrets.FIREBASE_PRIVATE_KEY }}\"" >> .env
                echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> .env
                echo "FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}" >> .env
                echo "FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }}" >> .env
                echo "FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }}" >> .env
                echo "MICROSOFT_SSO_ENABLED=${{ secrets.DEV_MICROSOFT_SSO_ENABLED }}" >> .env
                echo "MICROSOFT_CLIENT_ID=${{ secrets.PROD_MICROSOFT_CLIENT_ID }}" >> .env
                echo "MICROSOFT_CLIENT_SECRET=${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}" >> .env
                echo "MICROSOFT_TENANT_ID=${{ secrets.PROD_MICROSOFT_TENANT_ID }}" >> .env
                echo "MICROSOFT_DOMAIN_HINT=${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}" >> .env
                echo "MICROSOFT_REDIRECT_URI=${{ secrets.DEV_MICROSOFT_REDIRECT_URI }}" >> .env

                sudo -E docker compose up --detach --build
              else
                echo "üîß Using production environment variables..."
                # Check if production deployment is possible
                if [[ -z "${{ secrets.PROD_DB_SERVER }}" ]] || \
                   [[ -z "${{ secrets.PROD_DB_NAME }}" ]] || \
                   [[ -z "${{ secrets.PROD_DB_USER }}" ]] || \
                   [[ -z "${{ secrets.PROD_DB_PASSWORD }}" ]] || \
                   [[ -z "${{ secrets.PROD_CORS_ORIGINS }}" ]] || \
                   [[ -z "${{ secrets.PROD_FRONTEND_URL }}" ]]; then
                  echo "‚ö†Ô∏è Some production secrets are missing. Skipping deployment."
                  exit 0
                fi

                echo "ENVIRONMENT=production" > .env
                echo "DB_SERVER='${{ secrets.PROD_DB_SERVER }}'" >> .env
                echo "DB_NAME='${{ secrets.PROD_DB_NAME }}'" >> .env
                echo "DB_USER='${{ secrets.PROD_DB_USER }}'" >> .env
                echo "DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}'" >> .env
                echo "CORS_ORIGINS='${{ secrets.PROD_CORS_ORIGINS }}'" >> .env
                echo "FRONTEND_URL='${{ secrets.PROD_FRONTEND_URL }}'" >> .env
                echo "AWS_S3_BUCKET='${{ secrets.AWS_S3_BUCKET }}'" >> .env
                echo "AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY_ID }}'" >> .env
                echo "AWS_SECRET_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'" >> .env
                echo "FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}'" >> .env
                echo "FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}'" >> .env
                echo "FIREBASE_PRIVATE_KEY=\"${{ secrets.FIREBASE_PRIVATE_KEY }}\"" >> .env
                echo "FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}'" >> .env
                echo "FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}'" >> .env
                echo "FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}'" >> .env
                echo "FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}'" >> .env
                echo "MICROSOFT_SSO_ENABLED='${{ secrets.PROD_MICROSOFT_SSO_ENABLED }}'" >> .env
                echo "MICROSOFT_CLIENT_ID='${{ secrets.PROD_MICROSOFT_CLIENT_ID }}'" >> .env
                echo "MICROSOFT_CLIENT_SECRET='${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}'" >> .env
                echo "MICROSOFT_TENANT_ID='${{ secrets.PROD_MICROSOFT_TENANT_ID }}'" >> .env
                echo "MICROSOFT_DOMAIN_HINT='${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}'" >> .env
                echo "MICROSOFT_REDIRECT_URI='${{ secrets.PROD_MICROSOFT_REDIRECT_URI }}'" >> .env

                sudo -E docker compose up --detach --build
              fi

              echo "‚è≥ Waiting for services to start..."
              sleep 10

              if ! sudo docker compose ps | grep -q "aion-api"; then
                echo "‚ùå API service failed to start"
                sudo docker compose logs api
                exit 1
              fi

              echo "üîç Checking API health..."
              MAX_RETRIES=5
              RETRY_COUNT=0
              SLEEP_TIME=5

              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                if curl -sk https://localhost/api/health | grep -q "healthy"; then
                  echo "‚úÖ API is healthy"
                  break
                else
                  echo "‚è≥ API not ready, waiting... (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                    echo "‚ùå API failed to become healthy. Showing logs:"
                    sudo docker compose logs
                    exit 1
                  fi
                  sleep $SLEEP_TIME
                fi
              done

              echo "üßπ Cleaning up old images..."
              sudo docker image prune -a --force --filter "until=72h"

              echo "‚úÖ Deployment completed successfully!"
              echo "Branch: $DEPLOY_BRANCH"
              echo "Commit: $GITHUB_SHA"
              echo "üåê Application is now available at https://$(hostname -f)"
          EOF
          fi