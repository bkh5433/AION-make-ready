name: Deploy Backend

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  AWS_REGION: us-east-1
  AMPLIFY_APP_ID: d2gprwz7nx272l
  AMPLIFY_ENV: dev

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check Required Secrets
        run: |
          missing_secrets=()
          
          # Check AWS credentials (required for deployment)
          for secret in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY EC2_HOST EC2_USERNAME SSH_PRIVATE_KEY; do
            if [[ -z "${{ secrets[format('{0}', secret)] }}" ]]; then
              missing_secrets+=("$secret")
              echo "::warning::Missing required secret: $secret"
            fi
          done
          
          # Check environment-specific secrets based on branch
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            for secret in DEV_DB_SERVER DEV_DB_NAME DEV_DB_USER DEV_DB_PASSWORD DEV_CORS_ORIGINS; do
              if [[ -z "${{ secrets[format('{0}', secret)] }}" ]]; then
                missing_secrets+=("$secret")
                echo "::warning::Missing required secret: $secret"
              fi
            done
          else
            for secret in PROD_DB_SERVER PROD_DB_NAME PROD_DB_USER PROD_DB_PASSWORD PROD_CORS_ORIGINS PROD_FRONTEND_URL; do
              if [[ -z "${{ secrets[format('{0}', secret)] }}" ]]; then
                missing_secrets+=("$secret")
                echo "::warning::Missing required secret: $secret"
              fi
            done
          fi
          
          # Check optional secrets (warn but don't fail if missing)
          for secret in FIREBASE_PROJECT_ID FIREBASE_PRIVATE_KEY_ID FIREBASE_PRIVATE_KEY FIREBASE_CLIENT_EMAIL FIREBASE_CLIENT_ID FIREBASE_AUTH_URI FIREBASE_TOKEN_URI; do
            if [[ -z "${{ secrets[format('{0}', secret)] }}" ]]; then
              echo "::warning::Missing optional Firebase secret: $secret"
            fi
          done
          
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            for secret in DEV_MICROSOFT_SSO_ENABLED DEV_MICROSOFT_CLIENT_ID DEV_MICROSOFT_CLIENT_SECRET DEV_MICROSOFT_TENANT_ID DEV_MICROSOFT_DOMAIN_HINT DEV_MICROSOFT_REDIRECT_URI; do
              if [[ -z "${{ secrets[format('{0}', secret)] }}" ]]; then
                echo "::warning::Missing optional Microsoft SSO secret: $secret"
              fi
            done
          else
            for secret in PROD_MICROSOFT_SSO_ENABLED PROD_MICROSOFT_CLIENT_ID PROD_MICROSOFT_CLIENT_SECRET PROD_MICROSOFT_TENANT_ID PROD_MICROSOFT_DOMAIN_HINT PROD_MICROSOFT_REDIRECT_URI; do
              if [[ -z "${{ secrets[format('{0}', secret)] }}" ]]; then
                echo "::warning::Missing optional Microsoft SSO secret: $secret"
              fi
            done
          fi
          
          if (( ${#missing_secrets[@]} > 0 )); then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi
          
          echo "✅ All required secrets are present"

  setup-env:
    runs-on: ubuntu-latest
    needs: validate-secrets
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up environment variables
        run: |
          echo "Setting up environment variables..."
          
          # Function to validate and create SSM parameter
          create_ssm_param() {
            local name=$1
            local value=$2
            local required=$3
          
            # Check if value is empty
            if [ -z "$value" ]; then
              if [ "$required" = "true" ]; then
                echo "❌ Error: Required value for $name is empty"
                return 1
              else
                echo "⚠️ Warning: Optional value for $name is empty, skipping..."
                return 0
              fi
            fi
          
            if aws ssm put-parameter \
              --name "/amplify/${AMPLIFY_APP_ID}/${AMPLIFY_ENV}/${name}" \
              --value "${value}" \
              --type "SecureString" \
              --overwrite; then
              echo "✅ Successfully set parameter: ${name}"
            else
              if [ "$required" = "true" ]; then
                echo "❌ Failed to set required parameter: ${name}"
                return 1
              else
                echo "⚠️ Failed to set optional parameter: ${name}"
                return 0
              fi
            fi
          }
          
          # Set environment based on branch
          if [ "${GITHUB_REF##*/}" = "dev" ]; then
            echo "🔧 Using development environment..."
            API_URL="${{ secrets.DEV_API_URL }}"
            FRONTEND_URL="${{ secrets.DEV_FRONTEND_URL }}"
          
            # Set required parameters
            create_ssm_param "API_URL" "$API_URL" true || exit 1
            create_ssm_param "FRONTEND_URL" "$FRONTEND_URL" true || exit 1
            create_ssm_param "DB_SERVER" "${{ secrets.DEV_DB_SERVER }}" true || exit 1
            create_ssm_param "DB_NAME" "${{ secrets.DEV_DB_NAME }}" true || exit 1
            create_ssm_param "DB_USER" "${{ secrets.DEV_DB_USER }}" true || exit 1
            create_ssm_param "DB_PASSWORD" "${{ secrets.DEV_DB_PASSWORD }}" true || exit 1
            create_ssm_param "CORS_ORIGINS" "${{ secrets.DEV_CORS_ORIGINS }}" true || exit 1
          
            # Set optional Microsoft SSO parameters
            create_ssm_param "MICROSOFT_SSO_ENABLED" "${{ secrets.DEV_MICROSOFT_SSO_ENABLED }}" false
            create_ssm_param "MICROSOFT_CLIENT_ID" "${{ secrets.DEV_MICROSOFT_CLIENT_ID }}" false
            create_ssm_param "MICROSOFT_CLIENT_SECRET" "${{ secrets.DEV_MICROSOFT_CLIENT_SECRET }}" false
            create_ssm_param "MICROSOFT_TENANT_ID" "${{ secrets.DEV_MICROSOFT_TENANT_ID }}" false
            create_ssm_param "MICROSOFT_DOMAIN_HINT" "${{ secrets.DEV_MICROSOFT_DOMAIN_HINT }}" false
            create_ssm_param "MICROSOFT_REDIRECT_URI" "${{ secrets.DEV_MICROSOFT_REDIRECT_URI }}" false
          else
            echo "🔧 Using production environment..."
            API_URL="${{ secrets.PROD_API_URL }}"
            FRONTEND_URL="${{ secrets.PROD_FRONTEND_URL }}"
          
            # Set required parameters
            create_ssm_param "API_URL" "$API_URL" true || exit 1
            create_ssm_param "FRONTEND_URL" "$FRONTEND_URL" true || exit 1
            create_ssm_param "DB_SERVER" "${{ secrets.PROD_DB_SERVER }}" true || exit 1
            create_ssm_param "DB_NAME" "${{ secrets.PROD_DB_NAME }}" true || exit 1
            create_ssm_param "DB_USER" "${{ secrets.PROD_DB_USER }}" true || exit 1
            create_ssm_param "DB_PASSWORD" "${{ secrets.PROD_DB_PASSWORD }}" true || exit 1
            create_ssm_param "CORS_ORIGINS" "${{ secrets.PROD_CORS_ORIGINS }}" true || exit 1
          
            # Set optional Microsoft SSO parameters
            create_ssm_param "MICROSOFT_SSO_ENABLED" "${{ secrets.PROD_MICROSOFT_SSO_ENABLED }}" false
            create_ssm_param "MICROSOFT_CLIENT_ID" "${{ secrets.PROD_MICROSOFT_CLIENT_ID }}" false
            create_ssm_param "MICROSOFT_CLIENT_SECRET" "${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}" false
            create_ssm_param "MICROSOFT_TENANT_ID" "${{ secrets.PROD_MICROSOFT_TENANT_ID }}" false
            create_ssm_param "MICROSOFT_DOMAIN_HINT" "${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}" false
            create_ssm_param "MICROSOFT_REDIRECT_URI" "${{ secrets.PROD_MICROSOFT_REDIRECT_URI }}" false
          fi
          
          # Set optional Firebase configuration
          create_ssm_param "FIREBASE_PROJECT_ID" "${{ secrets.FIREBASE_PROJECT_ID }}" false
          create_ssm_param "FIREBASE_PRIVATE_KEY_ID" "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" false
          create_ssm_param "FIREBASE_PRIVATE_KEY" "${{ secrets.FIREBASE_PRIVATE_KEY }}" false
          create_ssm_param "FIREBASE_CLIENT_EMAIL" "${{ secrets.FIREBASE_CLIENT_EMAIL }}" false
          create_ssm_param "FIREBASE_CLIENT_ID" "${{ secrets.FIREBASE_CLIENT_ID }}" false
          create_ssm_param "FIREBASE_AUTH_URI" "${{ secrets.FIREBASE_AUTH_URI }}" false
          create_ssm_param "FIREBASE_TOKEN_URI" "${{ secrets.FIREBASE_TOKEN_URI }}" false
          
          echo "✅ Environment variables set up successfully!"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GITHUB_SHA: ${{ github.sha }}
          BRANCH_NAME: ${GITHUB_REF##*/}
        run: |
          echo "🚀 Starting deployment process..."
          echo "Branch: ${GITHUB_REF##*/}"
          echo "Commit: $GITHUB_SHA"
          
          echo "📝 Setting up SSH key..."
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          
          ssh -o StrictHostKeyChecking=no -i private_key $EC2_USERNAME@$EC2_HOST << EOF
            set -e  # Exit on any error
          
            echo "🔍 Checking system status..."
            df -h
            docker system df
            echo "Memory usage:"
            free -h
            
            echo "📦 Setting up deployment directory..."
            DEPLOY_DIR=~/aion-api
            DEPLOY_BRANCH="${GITHUB_REF##*/}"
          
            # Create fresh deployment directory
            echo "Removing old deployment directory if it exists..."
            rm -rf \$DEPLOY_DIR
            mkdir -p \$DEPLOY_DIR
            cd \$DEPLOY_DIR
          
            echo "🐳 Checking Docker status..."
            docker ps
          
            echo "🛑 Cleaning up old Docker resources..."
            echo "Current Docker status:"
            docker ps -a
            docker images
          
            # Stop and remove all containers
            echo "Stopping and removing old containers..."
            docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r docker stop
            docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r docker rm
          
            # Remove old images
            echo "Removing old images..."
            docker images "aion-*" --format "{{.ID}}" | xargs -r docker rmi
          
            echo "Docker status after cleanup:"
            docker ps -a
            docker images

            echo "📥 Cloning repository..."
            git clone -b \$DEPLOY_BRANCH https://github.com/${{ github.repository }}.git .
          
            echo "✅ Verifying repository..."
            git status
            echo "Current commit: $(git rev-parse HEAD)"
          
            # Set up nginx
            echo "🔧 Setting up nginx..."
            sudo mkdir -p /var/www/html
            sudo chown -R www-data:www-data /var/www/html
          
            # Backup existing nginx configuration
            echo "📑 Backing up existing nginx configuration..."
            sudo cp /etc/nginx/sites-available/api /etc/nginx/sites-available/api.backup
          
            # Update nginx configuration
            echo "🔄 Updating nginx configuration..."
            sudo cp backend/nginx.conf /etc/nginx/sites-available/api
          
            # Test and reload nginx
            echo "🔍 Testing nginx configuration..."
            sudo nginx -t && sudo systemctl reload nginx
          
            echo "🏗️ Building and starting services..."
            if [ "\$DEPLOY_BRANCH" = "dev" ]; then
              echo "🔧 Using development environment variables..."
              docker-compose up -d --build \
                -e ENVIRONMENT='production' \
                -e DB_SERVER='${{ secrets.DEV_DB_SERVER }}' \
                -e DB_NAME='${{ secrets.DEV_DB_NAME }}' \
                -e DB_USER='${{ secrets.DEV_DB_USER }}' \
                -e DB_PASSWORD='${{ secrets.DEV_DB_PASSWORD }}' \
                -e CORS_ORIGINS='${{ secrets.DEV_CORS_ORIGINS }}' \
                -e FRONTEND_URL='${{ secrets.DEV_FRONTEND_URL }}' \
                -e FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}' \
                -e FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}' \
                -e FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}' \
                -e FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}' \
                -e FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}' \
                -e FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}' \
                -e FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}' \
                -e MICROSOFT_SSO_ENABLED='${{ secrets.DEV_MICROSOFT_SSO_ENABLED }}' \
                -e MICROSOFT_CLIENT_ID='${{ secrets.DEV_MICROSOFT_CLIENT_ID }}' \
                -e MICROSOFT_CLIENT_SECRET='${{ secrets.DEV_MICROSOFT_CLIENT_SECRET }}' \
                -e MICROSOFT_TENANT_ID='${{ secrets.DEV_MICROSOFT_TENANT_ID }}' \
                -e MICROSOFT_DOMAIN_HINT='${{ secrets.DEV_MICROSOFT_DOMAIN_HINT }}' \
                -e MICROSOFT_REDIRECT_URI='${{ secrets.DEV_MICROSOFT_REDIRECT_URI }}'
            else
              echo "🔧 Using production environment variables..."
              docker-compose up -d --build \
                -e DB_SERVER='${{ secrets.PROD_DB_SERVER }}' \
                -e DB_NAME='${{ secrets.PROD_DB_NAME }}' \
                -e DB_USER='${{ secrets.PROD_DB_USER }}' \
                -e DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}' \
                -e CORS_ORIGINS='${{ secrets.PROD_CORS_ORIGINS }}' \
                -e FRONTEND_URL='${{ secrets.PROD_FRONTEND_URL }}' \
                -e FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}' \
                -e FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}' \
                -e FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}' \
                -e FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}' \
                -e FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}' \
                -e FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}' \
                -e FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}' \
                -e MICROSOFT_SSO_ENABLED='${{ secrets.PROD_MICROSOFT_SSO_ENABLED }}' \
                -e MICROSOFT_CLIENT_ID='${{ secrets.PROD_MICROSOFT_CLIENT_ID }}' \
                -e MICROSOFT_CLIENT_SECRET='${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}' \
                -e MICROSOFT_TENANT_ID='${{ secrets.PROD_MICROSOFT_TENANT_ID }}' \
                -e MICROSOFT_DOMAIN_HINT='${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}' \
                -e MICROSOFT_REDIRECT_URI='${{ secrets.PROD_MICROSOFT_REDIRECT_URI }}'
            fi
          
            echo "⏳ Waiting for services to start..."
            sleep 10
          
            # Check if services are running
            if ! docker ps | grep -q "aion-api"; then
              echo "❌ API service failed to start"
              docker-compose logs api
              exit 1
            fi
          
            if ! docker ps | grep -q "aion-frontend"; then
              echo "❌ Frontend service failed to start"
              docker-compose logs frontend
              exit 1
            fi
          
            # Check if API is responding
            echo "🔍 Checking API health..."
            MAX_RETRIES=5
            RETRY_COUNT=0
            SLEEP_TIME=5
          
            while [ \$RETRY_COUNT -lt \$MAX_RETRIES ]; do
              if curl -sk https://localhost/api/health | grep -q "healthy"; then
                echo "✅ API is healthy"
                break
              else
                echo "⏳ API not ready, waiting... (Attempt \$((RETRY_COUNT + 1))/\$MAX_RETRIES)"
                RETRY_COUNT=\$((RETRY_COUNT + 1))
                if [ \$RETRY_COUNT -eq \$MAX_RETRIES ]; then
                  echo "❌ API failed to become healthy. Showing logs:"
                  docker-compose logs
                  exit 1
                fi
                sleep \$SLEEP_TIME
              fi
            done

            echo "🧹 Cleaning up old images..."
            docker image prune -a --force --filter "until=72h"
          
            echo "📊 Final system status:"
            df -h
            docker system df
          
            echo "✅ Deployment completed successfully!"
            echo "Branch: \$DEPLOY_BRANCH"
            echo "Commit: $GITHUB_SHA"
            echo "🌐 Application is now available at https://$(hostname -f)"
          EOF