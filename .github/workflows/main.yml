name: Deploy Backend

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  AMPLIFY_APP_ID: d2gprwz7nx272l
  AMPLIFY_ENV: dev

jobs:
  setup-env:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up environment variables
        run: |
          echo "Setting up environment variables..."
          
          # Function to validate and create SSM parameter
          create_ssm_param() {
            local name=$1
            local value=$2
          
            # Check if value is empty
            if [ -z "$value" ]; then
              echo "❌ Error: Value for $name is empty"
              return 1
            fi
          
            if aws ssm put-parameter \
              --name "/amplify/${AMPLIFY_APP_ID}/${AMPLIFY_ENV}/${name}" \
              --value "${value}" \
              --type "SecureString" \
              --overwrite; then
              echo "✅ Successfully set parameter: ${name}"
            else
              echo "❌ Failed to set parameter: ${name}"
              return 1
            fi
          }
          
          # Set environment based on branch
          if [ "${GITHUB_REF##*/}" = "dev" ]; then
            echo "🔧 Using development environment..."
            API_URL="${{ secrets.DEV_API_URL }}"
          else
            echo "🔧 Using production environment..."
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          # Set up environment variables
          create_ssm_param "API_URL" "$API_URL" || exit 1
          
          # Set up shared Firebase configuration
          create_ssm_param "FIREBASE_PROJECT_ID" "${{ secrets.FIREBASE_PROJECT_ID }}" || exit 1
          create_ssm_param "FIREBASE_PRIVATE_KEY_ID" "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" || exit 1
          create_ssm_param "FIREBASE_PRIVATE_KEY" "${{ secrets.FIREBASE_PRIVATE_KEY }}" || exit 1
          create_ssm_param "FIREBASE_CLIENT_EMAIL" "${{ secrets.FIREBASE_CLIENT_EMAIL }}" || exit 1
          create_ssm_param "FIREBASE_CLIENT_ID" "${{ secrets.FIREBASE_CLIENT_ID }}" || exit 1
          create_ssm_param "FIREBASE_AUTH_URI" "${{ secrets.FIREBASE_AUTH_URI }}" || exit 1
          create_ssm_param "FIREBASE_TOKEN_URI" "${{ secrets.FIREBASE_TOKEN_URI }}" || exit 1
          
          echo "✅ Environment variables set up successfully!"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Backend to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GITHUB_SHA: ${{ github.sha }}
          BRANCH_NAME: ${GITHUB_REF##*/}
        run: |
          echo "🚀 Starting deployment process..."
          echo "Branch: ${GITHUB_REF##*/}"
          echo "Commit: $GITHUB_SHA"
          
          echo "📝 Setting up SSH key..."
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          
          ssh -o StrictHostKeyChecking=no -i private_key $EC2_USERNAME@$EC2_HOST << EOF
            set -e  # Exit on any error
          
            echo "🔍 Checking system status..."
            df -h
            docker system df
            echo "Memory usage:"
            free -h
          
            echo "�� Setting up deployment directory..."
            DEPLOY_DIR=~/aion-api
            DEPLOY_BRANCH="${GITHUB_REF##*/}"
          
            # Create fresh deployment directory
            echo "Removing old deployment directory if it exists..."
            rm -rf \$DEPLOY_DIR
            mkdir -p \$DEPLOY_DIR
            cd \$DEPLOY_DIR
          
            echo "🐳 Checking Docker status..."
            docker ps
          
            echo "🛑 Cleaning up old Docker resources..."
            echo "Current Docker status:"
            docker ps -a
            docker images
          
            # Stop and remove all containers with name aion-api
            echo "Stopping and removing old containers..."
            docker ps -a --filter "name=aion-api" --format "{{.ID}}" | xargs -r docker stop
            docker ps -a --filter "name=aion-api" --format "{{.ID}}" | xargs -r docker rm
          
            # Remove old images
            echo "Removing old aion-api images..."
            docker images "aion-api" --format "{{.ID}}" | xargs -r docker rmi
          
            echo "Docker status after cleanup:"
            docker ps -a
            docker images

            echo "📥 Cloning repository..."
            echo "Branch: \$DEPLOY_BRANCH"
            git clone -b \$DEPLOY_BRANCH https://github.com/${{ github.repository }}.git .
          
            echo "✅ Verifying repository..."
            git status
            echo "Current commit: $(git rev-parse HEAD)"
          
            echo "🔍 Checking repository structure..."
            ls -la
            if [ ! -d "backend" ]; then
              echo "❌ Error: backend directory not found!"
              pwd
              ls -la
              exit 1
            fi
          
            echo "📦 Checking backend directory contents..."
            ls -la backend/
          
            echo "📄 Copying requirements.txt and app.py to backend directory..."
            cp requirements.txt backend/
            cp app.py backend/
          
            echo "🔍 Verifying app.py location..."
            ls -la backend/app.py
          
            echo "🏗 Setting up nginx..."
            sudo apt-get update
            sudo apt-get install -y nginx
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo cp backend/nginx.conf /etc/nginx/conf.d/default.conf
            sudo systemctl restart nginx
          
            echo "🏗️ Building Docker image..."
            echo "Using Dockerfile at: backend/Dockerfile"
            cat backend/Dockerfile
            docker build -t aion-api:$GITHUB_SHA -f backend/Dockerfile .
          
            echo "✅ Verifying built image..."
            docker images | grep aion-api
          
            echo "🚀 Starting container..."
            if [ "\$DEPLOY_BRANCH" = "dev" ]; then
              echo "🔧 Using development environment variables..."
              docker run -d \
                --name aion-api \
                --restart always \
                -p 5000:5000 \
                -e ENV='development' \
                -e DB_SERVER='${{ secrets.DEV_DB_SERVER }}' \
                -e DB_NAME='${{ secrets.DEV_DB_NAME }}' \
                -e DB_USER='${{ secrets.DEV_DB_USER }}' \
                -e DB_PASSWORD='${{ secrets.DEV_DB_PASSWORD }}' \
                -e AWS_S3_BUCKET='${{ secrets.DEV_AWS_BUCKET_NAME }}' \
                -e AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY_ID }}' \
                -e AWS_SECRET_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
                -e CORS_ORIGINS='${{ secrets.DEV_CORS_ORIGINS }}' \
                -e FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}' \
                -e FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}' \
                -e FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}' \
                -e FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}' \
                -e FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}' \
                -e FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}' \
                -e FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}' \
                aion-api:$GITHUB_SHA
            else
              echo "🔧 Using production environment variables..."
              docker run -d \
                --name aion-api \
                --restart always \
                -p 5000:5000 \
                -e ENV='production' \
                -e DB_SERVER='${{ secrets.PROD_DB_SERVER }}' \
                -e DB_NAME='${{ secrets.PROD_DB_NAME }}' \
                -e DB_USER='${{ secrets.PROD_DB_USER }}' \
                -e DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}' \
                -e AWS_S3_BUCKET='${{ secrets.PROD_AWS_BUCKET_NAME }}' \
                -e AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY_ID }}' \
                -e AWS_SECRET_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
                -e CORS_ORIGINS='${{ secrets.PROD_CORS_ORIGINS }}' \
                -e FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}' \
                -e FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}' \
                -e FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}' \
                -e FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}' \
                -e FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}' \
                -e FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}' \
                -e FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}' \
                aion-api:$GITHUB_SHA
            fi

            # Wait for container to be healthy
            echo "⏳ Waiting for container to start..."
            sleep 5
          
            # Check container logs
            echo "📋 Container logs:"
            docker logs aion-api
          
            # Check if container is still running
            if ! docker ps | grep -q aion-api; then
              echo "❌ Container failed to start. Showing last logs:"
              docker logs aion-api
              exit 1
            fi
          
            # Check if API is responding
            echo "🔍 Checking API health..."
            MAX_RETRIES=5
            RETRY_COUNT=0
            SLEEP_TIME=5
          
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if curl -s http://localhost:5000/api/health | grep -q "healthy"; then
                echo "✅ API is healthy"
                break
              else
                echo "⏳ API not ready, waiting... (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "❌ API failed to become healthy. Showing logs:"
                  docker logs aion-api
                  exit 1
                fi
                sleep $SLEEP_TIME
              fi
            done

            echo "🧹 Cleaning up old images..."
            echo "Before cleanup:"
            docker image ls
            docker image prune -a --force --filter "until=72h"
            echo "After cleanup:"
            docker image ls
          
            echo "📊 Final system status:"
            df -h
            docker system df
          
            echo "✅ Deployment completed successfully!"
            echo "Branch: \$DEPLOY_BRANCH"
            echo "Commit: $GITHUB_SHA"
            echo "Container ID: $(docker ps -q -f name=aion-api)"
          EOF