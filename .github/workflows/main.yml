name: Deploy Backend

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  AWS_REGION: us-east-1

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check Required Secrets
        run: |
          missing_secrets=()
          
          # Check AWS credentials (required for deployment)
          if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]]; then
            missing_secrets+=("AWS_ACCESS_KEY_ID")
          fi
          if [[ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            missing_secrets+=("AWS_SECRET_ACCESS_KEY")
          fi
          if [[ -z "${{ secrets.EC2_HOST }}" ]]; then
            missing_secrets+=("EC2_HOST")
          fi
          if [[ -z "${{ secrets.EC2_USERNAME }}" ]]; then
            missing_secrets+=("EC2_USERNAME")
          fi
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            missing_secrets+=("SSH_PRIVATE_KEY")
          fi
          
          # Check environment-specific secrets based on branch
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            # Development environment secrets
            if [[ -z "${{ secrets.DEV_DB_SERVER }}" ]]; then
              missing_secrets+=("DEV_DB_SERVER")
            fi
            if [[ -z "${{ secrets.DEV_DB_NAME }}" ]]; then
              missing_secrets+=("DEV_DB_NAME")
            fi
            if [[ -z "${{ secrets.DEV_DB_USER }}" ]]; then
              missing_secrets+=("DEV_DB_USER")
            fi
            if [[ -z "${{ secrets.DEV_DB_PASSWORD }}" ]]; then
              missing_secrets+=("DEV_DB_PASSWORD")
            fi
            if [[ -z "${{ secrets.DEV_CORS_ORIGINS }}" ]]; then
              missing_secrets+=("DEV_CORS_ORIGINS")
            fi
          else
            # Production environment secrets (optional)
            if [[ -z "${{ secrets.PROD_DB_SERVER }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_SERVER"
            fi
            if [[ -z "${{ secrets.PROD_DB_NAME }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_NAME"
            fi
            if [[ -z "${{ secrets.PROD_DB_USER }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_USER"
            fi
            if [[ -z "${{ secrets.PROD_DB_PASSWORD }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_DB_PASSWORD"
            fi
            if [[ -z "${{ secrets.PROD_CORS_ORIGINS }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_CORS_ORIGINS"
            fi
            if [[ -z "${{ secrets.PROD_FRONTEND_URL }}" ]]; then
              echo "::warning::Missing optional production secret: PROD_FRONTEND_URL"
            fi
          fi
          
          # Check optional Firebase secrets
          if [[ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_PROJECT_ID"
          fi
          if [[ -z "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_PRIVATE_KEY_ID"
          fi
          if [[ -z "${{ secrets.FIREBASE_PRIVATE_KEY }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_PRIVATE_KEY"
          fi
          if [[ -z "${{ secrets.FIREBASE_CLIENT_EMAIL }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_CLIENT_EMAIL"
          fi
          if [[ -z "${{ secrets.FIREBASE_CLIENT_ID }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_CLIENT_ID"
          fi
          if [[ -z "${{ secrets.FIREBASE_AUTH_URI }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_AUTH_URI"
          fi
          if [[ -z "${{ secrets.FIREBASE_TOKEN_URI }}" ]]; then
            echo "::warning::Missing optional Firebase secret: FIREBASE_TOKEN_URI"
          fi
          
          # Check optional Microsoft SSO secrets
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            if [[ -z "${{ secrets.DEV_MICROSOFT_SSO_ENABLED }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_SSO_ENABLED"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_CLIENT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_CLIENT_ID"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_CLIENT_SECRET }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_CLIENT_SECRET"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_TENANT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_TENANT_ID"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_DOMAIN_HINT }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_DOMAIN_HINT"
            fi
            if [[ -z "${{ secrets.DEV_MICROSOFT_REDIRECT_URI }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: DEV_MICROSOFT_REDIRECT_URI"
            fi
          else
            if [[ -z "${{ secrets.PROD_MICROSOFT_SSO_ENABLED }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_SSO_ENABLED"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_CLIENT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_CLIENT_ID"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_CLIENT_SECRET"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_TENANT_ID }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_TENANT_ID"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_DOMAIN_HINT"
            fi
            if [[ -z "${{ secrets.PROD_MICROSOFT_REDIRECT_URI }}" ]]; then
              echo "::warning::Missing optional Microsoft SSO secret: PROD_MICROSOFT_REDIRECT_URI"
            fi
          fi
          
          if (( ${#missing_secrets[@]} > 0 )); then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi
          
          echo "✅ All required secrets are present"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: validate-secrets
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GITHUB_SHA: ${{ github.sha }}
          BRANCH_NAME: ${GITHUB_REF##*/}
        run: |
          echo "🚀 Starting deployment process..."
          echo "Branch: ${GITHUB_REF##*/}"
          echo "Commit: $GITHUB_SHA"
          
          echo "📝 Setting up SSH key..."
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          
          ssh -o StrictHostKeyChecking=no -i private_key $EC2_USERNAME@$EC2_HOST << EOF
            set -e  # Exit on any error
          
            echo "🔍 Checking system status..."
            df -h
            docker system df
            echo "Memory usage:"
            free -h
            
            echo "📦 Setting up deployment directory..."
            DEPLOY_DIR=~/aion-api
            DEPLOY_BRANCH="${GITHUB_REF##*/}"
          
            # Create fresh deployment directory
            echo "Removing old deployment directory if it exists..."
            rm -rf \$DEPLOY_DIR
            mkdir -p \$DEPLOY_DIR
            cd \$DEPLOY_DIR
          
            echo "🐳 Checking Docker status..."
            docker ps
          
            echo "🛑 Cleaning up old Docker resources..."
            echo "Current Docker status:"
            docker ps -a
            docker images
          
            # Stop and remove all containers
            echo "Stopping and removing old containers..."
            docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r docker stop
            docker ps -a --filter "name=aion-" --format "{{.ID}}" | xargs -r docker rm
          
            # Remove old images
            echo "Removing old images..."
            docker images "aion-*" --format "{{.ID}}" | xargs -r docker rmi
          
            echo "Docker status after cleanup:"
            docker ps -a
            docker images

            echo "📥 Cloning repository..."
            git clone -b \$DEPLOY_BRANCH https://github.com/${{ github.repository }}.git .
          
            echo "✅ Verifying repository..."
            git status
            echo "Current commit: $(git rev-parse HEAD)"
          
            # Set up nginx
            echo "🔧 Setting up nginx..."
            sudo mkdir -p /var/www/html
            sudo chown -R www-data:www-data /var/www/html
          
            # Backup existing nginx configuration
            echo "📑 Backing up existing nginx configuration..."
            sudo cp /etc/nginx/sites-available/api /etc/nginx/sites-available/api.backup
          
            # Update nginx configuration
            echo "🔄 Updating nginx configuration..."
            sudo cp backend/nginx.conf /etc/nginx/sites-available/api
          
            # Test and reload nginx
            echo "🔍 Testing nginx configuration..."
            sudo nginx -t && sudo systemctl reload nginx
          
            echo "🏗️ Building and starting services..."
            if [ "\$DEPLOY_BRANCH" = "dev" ]; then
              echo "🔧 Using development environment variables..."
              ENVIRONMENT=development \
              DB_SERVER='${{ secrets.DEV_DB_SERVER }}' \
              DB_NAME='${{ secrets.DEV_DB_NAME }}' \
              DB_USER='${{ secrets.DEV_DB_USER }}' \
              DB_PASSWORD='${{ secrets.DEV_DB_PASSWORD }}' \
              CORS_ORIGINS='${{ secrets.DEV_CORS_ORIGINS }}' \
              FRONTEND_URL='${{ secrets.DEV_FRONTEND_URL }}' \
              FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}' \
              FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}' \
              FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}' \
              FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}' \
              FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}' \
              FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}' \
              FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}' \
              MICROSOFT_SSO_ENABLED='${{ secrets.DEV_MICROSOFT_SSO_ENABLED }}' \
              MICROSOFT_CLIENT_ID='${{ secrets.DEV_MICROSOFT_CLIENT_ID }}' \
              MICROSOFT_CLIENT_SECRET='${{ secrets.DEV_MICROSOFT_CLIENT_SECRET }}' \
              MICROSOFT_TENANT_ID='${{ secrets.DEV_MICROSOFT_TENANT_ID }}' \
              MICROSOFT_DOMAIN_HINT='${{ secrets.DEV_MICROSOFT_DOMAIN_HINT }}' \
              MICROSOFT_REDIRECT_URI='${{ secrets.DEV_MICROSOFT_REDIRECT_URI }}' \
              docker compose up -d --build
            else
              echo "🔧 Using production environment variables..."
              # Check if production deployment is possible
              if [[ -z "${{ secrets.PROD_DB_SERVER }}" ]] || \
                 [[ -z "${{ secrets.PROD_DB_NAME }}" ]] || \
                 [[ -z "${{ secrets.PROD_DB_USER }}" ]] || \
                 [[ -z "${{ secrets.PROD_DB_PASSWORD }}" ]] || \
                 [[ -z "${{ secrets.PROD_CORS_ORIGINS }}" ]] || \
                 [[ -z "${{ secrets.PROD_FRONTEND_URL }}" ]]; then
                echo "⚠️ Some production secrets are missing. Skipping deployment."
                exit 0
              fi
          
              ENVIRONMENT=production \
              DB_SERVER='${{ secrets.PROD_DB_SERVER }}' \
              DB_NAME='${{ secrets.PROD_DB_NAME }}' \
              DB_USER='${{ secrets.PROD_DB_USER }}' \
              DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}' \
              CORS_ORIGINS='${{ secrets.PROD_CORS_ORIGINS }}' \
              FRONTEND_URL='${{ secrets.PROD_FRONTEND_URL }}' \
              FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}' \
              FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}' \
              FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}' \
              FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}' \
              FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}' \
              FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}' \
              FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}' \
              MICROSOFT_SSO_ENABLED='${{ secrets.PROD_MICROSOFT_SSO_ENABLED }}' \
              MICROSOFT_CLIENT_ID='${{ secrets.PROD_MICROSOFT_CLIENT_ID }}' \
              MICROSOFT_CLIENT_SECRET='${{ secrets.PROD_MICROSOFT_CLIENT_SECRET }}' \
              MICROSOFT_TENANT_ID='${{ secrets.PROD_MICROSOFT_TENANT_ID }}' \
              MICROSOFT_DOMAIN_HINT='${{ secrets.PROD_MICROSOFT_DOMAIN_HINT }}' \
              MICROSOFT_REDIRECT_URI='${{ secrets.PROD_MICROSOFT_REDIRECT_URI }}' \
              docker compose up -d --build
            fi
          
            echo "⏳ Waiting for services to start..."
            sleep 10
          
            # Check if services are running
            if ! docker ps | grep -q "aion-api"; then
              echo "❌ API service failed to start"
              docker compose logs api
              exit 1
            fi
          
            if ! docker ps | grep -q "aion-frontend"; then
              echo "❌ Frontend service failed to start"
              docker compose logs frontend
              exit 1
            fi
          
            # Check if API is responding
            echo "🔍 Checking API health..."
            MAX_RETRIES=5
            RETRY_COUNT=0
            SLEEP_TIME=5
          
            while [ \$RETRY_COUNT -lt \$MAX_RETRIES ]; do
              if curl -sk https://localhost/api/health | grep -q "healthy"; then
                echo "✅ API is healthy"
                break
              else
                echo "⏳ API not ready, waiting... (Attempt \$((RETRY_COUNT + 1))/\$MAX_RETRIES)"
                RETRY_COUNT=\$((RETRY_COUNT + 1))
                if [ \$RETRY_COUNT -eq \$MAX_RETRIES ]; then
                  echo "❌ API failed to become healthy. Showing logs:"
                  docker compose logs
                  exit 1
                fi
                sleep \$SLEEP_TIME
              fi
            done

            echo "🧹 Cleaning up old images..."
            docker image prune -a --force --filter "until=72h"
          
            echo "📊 Final system status:"
            df -h
            docker system df
          
            echo "✅ Deployment completed successfully!"
            echo "Branch: \$DEPLOY_BRANCH"
            echo "Commit: $GITHUB_SHA"
            echo "🌐 Application is now available at https://$(hostname -f)"
          EOF