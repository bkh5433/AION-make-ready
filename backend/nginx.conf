server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ec2-35-172-140-83.compute-1.amazonaws.com;

    include snippets/self-signed.conf;
    include snippets/ssl-params.conf;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # API endpoints
    location /api {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;

        # CORS headers (if still needed)
        add_header "Access-Control-Allow-Origin" "https://dev.d2gprwz7nx272l.amplifyapp.com" always;
        add_header "Access-Control-Allow-Methods" "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header "Access-Control-Allow-Headers" "Authorization, Content-Type" always;
        add_header "Access-Control-Allow-Credentials" "true" always;

        if ($request_method = "OPTIONS") {
            add_header "Access-Control-Allow-Origin" "https://dev.d2gprwz7nx272l.amplifyapp.com" always;
            add_header "Access-Control-Allow-Methods" "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header "Access-Control-Allow-Headers" "Authorization, Content-Type" always;
            add_header "Access-Control-Allow-Credentials" "true" always;
            add_header "Content-Type" "text/plain charset=UTF-8";
            add_header "Content-Length" 0;
            return 204;
        }
    }

    # Frontend static files
    location / {
        root /var/www/html;
        try_files $uri $uri/ /index.html;
        expires 1h;
        add_header Cache-Control "public, no-transform";
    }

    # Deny access to . files
    location ~ /\. {
        deny all;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name ec2-35-172-140-83.compute-1.amazonaws.com;
    return 301 https://$server_name$request_uri;
}